use std::fs;

use eframe::{
    App,
    egui::{
        self, Color32, Label, RichText, ScrollArea, Sense, TextStyle, TextWrapMode, Vec2, Widget,
    },
};

pub mod data;

pub struct HesApp {
    show_left_panel: bool,
    show_center_panel: bool,
    show_right_panel: bool,
    bytecode: Vec<u8>,
    bytecode_option: BytecodeDisplayOptions,
}

impl<'src, 'b> Default for HesApp {
    fn default() -> Self {
        Self {
            // Example stuff:
            show_left_panel: true,
            show_center_panel: true,
            show_right_panel: true,

            bytecode: vec![],
            bytecode_option: BytecodeDisplayOptions::default(),
        }
    }
}

impl<'src, 'b> HesApp {
    pub fn new(_cc: &eframe::CreationContext<'_>, path: &str) -> Self {
        // This is also where you can customize the look and feel of egui using
        // `cc.egui_ctx.set_visuals` and `cc.egui_ctx.set_fonts`.

        // Load previous app state (if any).
        // Note that you must enable the `persistence` feature for this to work.
        //if let Some(storage) = cc.storage {
        //    return eframe::get_value(storage, eframe::APP_KEY).unwrap_or_default();
        //}
        let mut app = Self {
            ..Default::default()
        };

        app.bytecode = fs::read(path).unwrap();

        app
    }
}

impl<'src> App for HesApp {
    fn update(&mut self, ctx: &eframe::egui::Context, _frame: &mut eframe::Frame) {
        egui::TopBottomPanel::top("top_panel").show(ctx, |ui| {
            egui::menu::bar(ui, |ui| {
                let is_web = cfg!(target_arch = "wasm32");
                if !is_web {
                    ui.menu_button("File", |ui| {
                        if ui.button("Quit").clicked() {
                            ctx.send_viewport_cmd(egui::ViewportCommand::Close);
                        }
                    });
                    ui.add_space(16.0);
                }

                egui::widgets::global_theme_preference_buttons(ui);
            });
            ui.vertical_centered(|ui| {
                ui.heading("HES-VM");
            });
            ui.vertical_centered(|ui| {
                ui.checkbox(&mut self.show_left_panel, "Your Code");
                ui.checkbox(&mut self.show_center_panel, "WAT Textformt");
                ui.checkbox(&mut self.show_right_panel, "WASM Bytecode");
            });
        });

        egui::TopBottomPanel::bottom("bottom_panel")
            .resizable(false)
            .min_height(0.0)
            .show(ctx, |ui| {
                ui.separator();

                ui.with_layout(egui::Layout::bottom_up(egui::Align::LEFT), |ui| {
                    powered_by_egui_and_eframe(ui);
                    egui::warn_if_debug_build(ui);
                });
            });
        egui::SidePanel::left("left_panel")
            .resizable(true)
            .default_width(450.0)
            .width_range(20.0..)
            .show_animated(ctx, self.show_left_panel, |ui| {
                ui.vertical_centered(|ui| {
                    ui.heading("Your code");
                });
                egui::ScrollArea::vertical().show(ui, |ui| {
                    ui.label(
                        "Irgendwann steht hier der Sourcecode der compilierten (eigenen) Sprache.",
                    )
                })
            });

        egui::SidePanel::right("right_panel")
            .resizable(true)
            .default_width(450.0)
            .width_range(20.0..)
            .show_animated(ctx, self.show_right_panel, |ui| {
                ui.vertical_centered(|ui| {
                    ui.heading("Your generated Bytecode");
                });
                egui::ScrollArea::vertical().show(ui, |ui| {
                    ui.label("Irgendwann steht hier der generierte wasm-Bytecode.");
                    draw_bytecode(ui, &self.bytecode, &self.bytecode_option);
                })
            });

        egui::CentralPanel::default().show(ctx, |ui| {
            ui.vertical_centered(|ui| {
                ui.heading("Your Code as WAT (Wasm Text Format)");
            });
            egui::ScrollArea::vertical().show(ui, |ui| {
                ui.label("Irgendwann steht hier generierte WASM-Code als WAT")
            })
        });
    }
}

// inspired by: https://github.com/Hirtol/egui_memory_editor
fn draw_bytecode(ui: &mut egui::Ui, bytecode: &[u8], bytecode_option: &BytecodeDisplayOptions) {
    let line_height = ui.text_style_height(&bytecode_option.memory_editor_adress_text_style);
    let max_lines =
        (bytecode.len() + bytecode_option.column_count - 1) / bytecode_option.column_count;

    let mut scroll = ScrollArea::vertical()
        .id_salt(0..0xFFFF)
        .max_height(f32::INFINITY)
        .auto_shrink([false, true]);

    scroll.show_rows(ui, line_height, max_lines, |ui, line_range| {
        egui::Grid::new("bytecode_grid")
            .striped(true)
            .spacing(Vec2::new(15.0, ui.style().spacing.item_spacing.y))
            .show(ui, |ui| {
                ui.style_mut().wrap_mode = Some(TextWrapMode::Extend);
                ui.style_mut().spacing.item_spacing.x = 3.0;

                for start_row in line_range.clone() {
                    let start_adress = 0 + (start_row * bytecode_option.column_count);
                    let line_range = start_adress..start_adress + bytecode_option.column_count;
                    draw_bytecode_values(ui, bytecode, start_adress);
                    ui.end_row();
                }
            });
    });
}
fn draw_bytecode_values(ui: &mut egui::Ui, bytecode: &[u8], start_adress: usize) {
    let column_count = 16;
    for grid_column in 0..(column_count + 7) / 8 {
        let start_adress = start_adress + 8 * grid_column;

        ui.horizontal(|ui| {
            let column_count = (column_count - 8 * grid_column).min(8);

            for column_index in 0..column_count {
                let memory_adress = start_adress + column_index;

                if memory_adress >= bytecode.len() {
                    break;
                }
                let mem_val = bytecode[memory_adress];

                let label_text = format!("{:02X}", mem_val);

                let text = RichText::new(label_text).text_style(TextStyle::Monospace);

                let _response = Label::new(text).sense(Sense::click()).ui(ui);
            }
        });
    }
}

pub struct BytecodeDisplayOptions {
    pub column_count: usize,
    pub zero_color: Color32,
    pub adress_text_color: Color32,
    pub highlight_text_color: Color32,
    pub memory_editor_text_style: TextStyle,
    pub memory_editor_adress_text_style: TextStyle,
    pub(crate) selected_adress_range: String,
}

impl Default for BytecodeDisplayOptions {
    fn default() -> Self {
        BytecodeDisplayOptions {
            column_count: 16,
            zero_color: Color32::from_gray(80),
            adress_text_color: Color32::from_rgb(125, 0, 125),
            highlight_text_color: Color32::from_rgb(0, 140, 140),
            memory_editor_text_style: TextStyle::Monospace,
            memory_editor_adress_text_style: TextStyle::Monospace,
            selected_adress_range: "".to_string(),
        }
    }
}

fn powered_by_egui_and_eframe(ui: &mut egui::Ui) {
    ui.horizontal(|ui| {
        ui.spacing_mut().item_spacing.x = 0.0;
        ui.label("Powered by ");
        ui.hyperlink_to("egui", "https://github.com/emilk/egui");
        ui.label(" and ");
        ui.hyperlink_to(
            "eframe",
            "https://github.com/emilk/egui/tree/master/crates/eframe",
        );
        ui.label(".");
    });
}
