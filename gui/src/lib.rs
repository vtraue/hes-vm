use eframe::{App, egui};

pub struct HesApp {
    show_left_panel: bool,
    show_center_panel: bool,
    show_right_panel: bool,
}

impl Default for HesApp {
    fn default() -> Self {
        Self {
            // Example stuff:
            show_left_panel: true,
            show_center_panel: true,
            show_right_panel: true,
        }
    }
}

impl HesApp {
    pub fn new(_cc: &eframe::CreationContext<'_>) -> Self {
        // This is also where you can customize the look and feel of egui using
        // `cc.egui_ctx.set_visuals` and `cc.egui_ctx.set_fonts`.

        // Load previous app state (if any).
        // Note that you must enable the `persistence` feature for this to work.
        //if let Some(storage) = cc.storage {
        //    return eframe::get_value(storage, eframe::APP_KEY).unwrap_or_default();
        //}

        Default::default()
    }
}

impl App for HesApp {
    fn update(&mut self, ctx: &eframe::egui::Context, _frame: &mut eframe::Frame) {
        egui::TopBottomPanel::top("top_panel").show(ctx, |ui| {
            egui::menu::bar(ui, |ui| {
                let is_web = cfg!(target_arch = "wasm32");
                if !is_web {
                    ui.menu_button("File", |ui| {
                        if ui.button("Quit").clicked() {
                            ctx.send_viewport_cmd(egui::ViewportCommand::Close);
                        }
                    });
                    ui.add_space(16.0);
                }

                egui::widgets::global_theme_preference_buttons(ui);
            });
            ui.vertical_centered(|ui| {
                ui.heading("HES-VM");
            });
            ui.vertical_centered(|ui| {
                ui.checkbox(&mut self.show_left_panel, "Your Code");
                ui.checkbox(&mut self.show_center_panel, "WAT Textformt");
                ui.checkbox(&mut self.show_right_panel, "WASM Bytecode");
            });
        });

        egui::TopBottomPanel::bottom("bottom_panel")
            .resizable(false)
            .min_height(0.0)
            .show(ctx, |ui| {
                ui.separator();

                ui.with_layout(egui::Layout::bottom_up(egui::Align::LEFT), |ui| {
                    powered_by_egui_and_eframe(ui);
                    egui::warn_if_debug_build(ui);
                });
            });
        egui::SidePanel::left("left_panel")
            .resizable(true)
            .default_width(450.0)
            .width_range(20.0..)
            .show_animated(ctx, self.show_left_panel, |ui| {
                ui.vertical_centered(|ui| {
                    ui.heading("Your code");
                });
                egui::ScrollArea::vertical().show(ui, |ui| {
                    ui.label(
                        "Irgendwann steht hier der Sourcecode der compilierten (eigenen) Sprache.",
                    )
                })
            });

        egui::SidePanel::right("right_panel")
            .resizable(true)
            .default_width(450.0)
            .width_range(20.0..)
            .show_animated(ctx, self.show_right_panel, |ui| {
                ui.vertical_centered(|ui| {
                    ui.heading("Your generated Bytecode");
                });
                egui::ScrollArea::vertical().show(ui, |ui| {
                    ui.label("Irgendwann steht hier der generierte wasm-Bytecode.")
                })
            });

        egui::CentralPanel::default().show(ctx, |ui| {
            ui.vertical_centered(|ui| {
                ui.heading("Your Code as WAT (Wasm Text Format)");
            });
            egui::ScrollArea::vertical().show(ui, |ui| {
                ui.label("Irgendwann steht hier generierte WASM-Code als WAT")
            })
        });
    }
}

//fn show_bytecode(ui &mut egui::ui) {
//
//}

fn powered_by_egui_and_eframe(ui: &mut egui::Ui) {
    ui.horizontal(|ui| {
        ui.spacing_mut().item_spacing.x = 0.0;
        ui.label("Powered by ");
        ui.hyperlink_to("egui", "https://github.com/emilk/egui");
        ui.label(" and ");
        ui.hyperlink_to(
            "eframe",
            "https://github.com/emilk/egui/tree/master/crates/eframe",
        );
        ui.label(".");
    });
}
