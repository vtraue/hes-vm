/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
	// Apply the application plugin to add support for building a CLI application in Java.
	id 'application'
		id 'antlr'
		id "com.diffplug.spotless" version "7.0.2"

}

repositories {
	// Use Maven Central for resolving dependencies.
	mavenCentral()
}

dependencies {
	// This dependency is used by the application.
	antlr 'org.antlr:antlr4:4.13.2'
	implementation libs.guava
		implementation project(':lib')
}

testing {
	suites {
		// Configure the built-in test suite
		test {
			// Use JUnit Jupiter test framework
			useJUnitJupiter('5.11.1')
		}
	}
}

// Apply a specific Java toolchain to ease working on different environments.
java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(23)
	}
}

application {
	// Define the main class for the application.
	mainClass = 'org.example.App'
}

spotless {
// optional: limit format enforcement to just the files changed by this feature branch
ratchetFrom 'origin/main'

format 'misc', {
	// define the files to apply `misc` to
	target '*.gradle', '.gitattributes', '.gitignore'

	// define the steps to apply to those files
	trimTrailingWhitespace()
	leadingSpacesToTabs() // or leadingTabsToSpaces. Takes an integer argument if you don't like 4
	endWithNewline()
}
java {
	// don't need to set target, it is inferred from java
	targetExclude('build/generated-src/**')

	// apply a specific flavor of google-java-format
	googleJavaFormat('1.17.0').aosp().reflowLongStrings().skipJavadocFormatting()
	// fix formatting of type annotations
	formatAnnotations()
	// make sure every file has the following copyright header.
	// optionally, Spotless can set copyright years by digging
	// through git history (see "license" section below)
	licenseHeader '/* (C)$YEAR */'
}
}

generateGrammarSource {
	arguments += ["-visitor", "-long-messages"]
}
